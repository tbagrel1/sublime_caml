#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Caml Light interpreter written in Python 3 in order to get the output of
Caml Light programs as it was launched with the official interpreter."""

import os
import random
import shutil
import socket
import stat
import subprocess
import urllib.request

import click

# Global vars for run part

INTERPRETER = "camllight"
ERROR_MSG = "\n=== ERRORS ===\n"
CLEAN = True
ENC = "utf-8"

# Global vars for update part

SCRIPT_PATH = os.path.abspath(os.path.realpath(__file__))
(SCRIPT_DIR, SCRIPT_NAME) = os.path.split(SCRIPT_PATH)
OS = os.name
POSIX = "posix"
WINDOWS = "nt"

if OS == POSIX:
    TEMP_DIR = "/tmp/"
elif OS == WINDOWS:
    TEMP_DIR = "C:/"
else:
    # Current directory
    TEMP_DIR = SCRIPT_DIR
GIT_LINK = ("https://raw.githubusercontent.com/tbagrel1/" +
            "sublime_caml/dev/camllight_interpreter")
TEMP_FILE_PREFIX = "camllight_"
ID_LENGTH = 5
TIMEOUT = 20


def update(debug):
    """Update the current script by downloading the new one from GitHub."""

    def add_exec_permission(path):
        """Add exec permission from the specified path, while keeping all
        other permissions unchanged.
        (source: https://stackoverflow.com/a/38511116)"""
        current_permissions = stat.S_IMODE(os.lstat(path).st_mode)

        USER_EXEC = stat.S_IXUSR
        GROUP_EXEC = stat.S_IXGRP
        OTHER_EXEC = stat.S_IXOTH
        EXEC = USER_EXEC | GROUP_EXEC | OTHER_EXEC

        os.chmod(path, current_permissions | EXEC)

    random_id = ""
    for _ in range(ID_LENGTH):
        random_id += str(random.randint(0, 9))
    update_name = TEMP_FILE_PREFIX + random_id
    temp_file_path = os.path.normpath(os.path.join(TEMP_DIR, update_name))
    # Downloading
    try:
        temp_file = open(temp_file_path, "wb")
        try:
            new_script_obj = urllib.request.urlopen(GIT_LINK,
                                                    timeout=TIMEOUT).read()
            temp_file.write(new_script_obj)
        except (urllib.request.HTTPError, urllib.request.URLError,
                socket.timeout) as e:
            click.echo("\nUnable to download the new version of the script. "
                       "Please try again later.")
            if debug:
                click.echo("Original error: [{]]".format(e))
            try:
                temp_file.close()
            except:
                pass
            return False
    except OSError as e:
        click.echo("\nUnable to create a temporary file.")
        if debug:
            click.echo("Original error: [{}]".format(e))
        return False
    # Allow execution (may need superuser privileges)
    try:
        add_exec_permission(temp_file_path)
    except OSError as e:
        click.echo("\nUnable to make the new version executable. Please "
                   "re-run the script with enough privileges.")
        if debug:
            click.echo("Original error: [{}]".format(e))
        return False
    # Move (may need superuser privileges)
    try:
        shutil.move(SCRIPT_PATH,
                    os.path.normpath(os.path.join(TEMP_DIR, SCRIPT_NAME)))
        shutil.move(temp_file_path,
                    SCRIPT_PATH)
    except shutil.Error as e:
        click.echo("\nUnable to move the new script to the current script "
                   "directory. Please re-run the script with enough "
                   "privileges.")
        if debug:
            click.echo("Original error: [{}]".format(e))
        return False
    click.echo("\n--------------------------"
               "\n| Update was successful! |"
               "\n--------------------------")
    return True


def clean_stdout(text):
    """Clean the stdout given by the Caml Light interpreter."""
    return "\n".join([line.strip("#") for line in text.split("\n")[2:]])


def clean_stderr(text):
    """Clean the stderr given by the Caml Light interpreter."""
    return text


def camlrun(in_path, out_file, show, debug):
    """Run the specified Caml Light file."""
    try:
        obj = None
        with open(in_path, "r") as in_file:
            obj = subprocess.run(["camllight"], stdin=in_file,
                                 stdout=subprocess.PIPE,
                                 stderr=subprocess.PIPE)
        stdout = obj.stdout.decode(ENC)
        stderr = obj.stderr.decode(ENC)
        if CLEAN:
            stdout = clean_stdout(stdout)
            stderr = clean_stderr(stderr)
        result = stdout
        if [line for line in stderr.split("\n") if line.strip()]:
            result += ERROR_MSG + "\n" + stderr
        if out_file:
            out_file.write(result)
        if show:
            click.echo(result)
        return True
    except Exception as e:
        click.echo("\nUnexpected error happened.")
        if debug:
            click.echo("Original error: [{}]".format(e))
        return False


@click.command()
@click.option("--in-path", "-i",
              type=click.Path(
                  exists=True, file_okay=True, dir_okay=False, readable=True,
                  resolve_path=True))
@click.option("--out-file", "-o", type=click.File(mode="w", encoding=ENC),
              help="Optional file where output will be written.")
@click.option("--show/--hide", default=True,
              help="Show or hide the Caml Light output.")
@click.option("--debug/--no-debug", default=False,
              help="Show or hide debug information.")
def main(in_path, out_file, show, debug):
    """Caml Light interpreter written in Python 3 in order to get the output of
    Caml Light programs as it was launched with the official interpreter."""
    if not in_path:
        update(debug)
    else:
        camlrun(in_path, out_file, show, debug)


if __name__ == "__main__":
    main()
